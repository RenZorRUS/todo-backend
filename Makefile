# Development tools versions
GOLANGCI_LINT_VERSION ?= 2.3.0
PRE_COMMIT_VERSION    ?= 4.2.0
UPX_VERSION           ?= 5.0.2
GOOSE_VERSION         ?= 3.24.3
SQLC_VERSION          ?= 1.29.0

# Operation system specific variables
OS := $(shell uname -s 2>/dev/null || echo Windows)

# Paths
DEV_ENV         := .env
PROD_ENV        := .env.prod
SQLC_GEN_DIR    := $(CURDIR)/src/internal/adapters/databases/postgres/generated
DEV_BIN         := $(CURDIR)/bin
DEV_TOOLS_PATHS := $(DEV_BIN)/pre-commit \
	$(DEV_BIN)/golangci-lint \
	$(DEV_BIN)/upx \
	$(DEV_BIN)/goose \
	$(DEV_BIN)/sqlc
export PATH := $(DEV_BIN):$(PATH)

# Values for running app in production
BINARY_NAME  := todo-backend
MAIN_DIR     := ./src/cmd/api
BUILD_DIR    := ./bin
BINARY_PATH  := $(BUILD_DIR)/$(BINARY_NAME)

# Shell commands shortcuts
LOAD_DEV_ENV := set -a && source $(DEV_ENV) && set +a
LOAD_PROD_ENV := set -a && source $(PROD_ENV) && set +a

# Testing values
COVERAGE_DIR := ./coverage
COVERAGE_EXCLUDE := $(shell go list ./... | grep -E 'domains|ports|consts|cmd|tests|errs')

# Go build flags
GOFLAGS     := -ldflags="-s -w"
CGO_ENABLED := 0

# SQLC flags
SQLC_OFFLINE_FLAGS := --file=$(CURDIR)/build/sqlc-offline.yaml
SQLC_FLAGS := --file=$(CURDIR)/build/sqlc.yaml

# Goose flags
GOOSE_DEV_FLAGS := -env $(DEV_ENV)
GOOSE_FLAGS     := -env $(PROD_ENV)

# Platform-specific installers
ifeq ($(OS),Linux)
	BREW_CMD := /bin/false
	CHOCO_CMD := /bin/false
else ifeq ($(OS),Darwin)
	BREW_CMD := brew
	CHOCO_CMD := /bin/false
else # Windows
	BREW_CMD := /bin/false
	CHOCO_CMD := choco
endif

# Phony targets (action names)
.PHONY: help
help:
	@echo "Usage:"
	@echo "  make [command]\n"
	@echo "Available Commands:"
	@echo "  make dev-tools-install  - ‚¨áÔ∏è  installs necessary development tools"
	@echo "  make pre-commit-install - ‚öôÔ∏è  set up pre-commit hooks in your local .git directory"
	@echo "  make clean-dev-tools    - üöÆ removes development tools"
	@echo "  make check              - üîé checks if all development tools are installed"
	@echo "  make db-dev-sync        - üîÑ applies all migrations to the development database (used .env)"
	@echo "  make db-prod-sync       - üîÑ applies all migrations to the production database (used .env.prod)"
	@echo "  make db-dev-down        - ‚¨áÔ∏è drops last migration from the development database"
	@echo "  make db-prod-down       - ‚¨áÔ∏è drops last migration from the production database"
	@echo "  make db-dev-rest        - üöÆ drops all migrations from the development database"
	@echo "  make db-prod-rest       - üöÆ drops all migrations from the production database"
	@echo "  make db-dev-status      - üîé shows current migration status of the development database"
	@echo "  make db-prod-status     - üîé shows current migration status of the production database"
	@echo "  make sqlc-check-offline - üîé checks if all SQL queries are valid offline"
	@echo "  make sqlc-check-dev     - üîé checks if all SQL queries are valid in development database (used .env)"
	@echo "  make sqlc-check-prod    - üîé checks if all SQL queries are valid in production database (used .env.prod)"
	@echo "  make lint               - üî• runs Golang linters according to rules in .golangci.yaml"
	@echo "  make fmt                - üßπ formats Golang code according to rules in .golangci.yaml"
	@echo "  make tidy               - üßπ checks, cleans and updates go.mod and go.sum files"
	@echo "  make audit              - üî• runs Golang linters and others quality checks"
	@echo "  make unit-test          - üß™ runs unit tests and creates coverage report in $(COVERAGE_DIR)"
	@echo "  make sqlc-gen-clean     - üöÆ removes Go code generated by sqlc"
	@echo "  make sqlc-gen-offline   - ‚öôÔ∏è  generates Go code using sqlc offline with built-in queries verification"
	@echo "  make sqlc-gen-dev       - ‚öôÔ∏è  generates Go code using sqlc with development database queries verification"
	@echo "  make sqlc-gen-prod      - ‚öôÔ∏è  generates Go code using sqlc with production database queries verification"
	@echo "  make clean              - üöÆ removes binary executable: $(BINARY_PATH)"
	@echo "  make build              - üöÄ builds binary executable: $(BINARY_PATH) from: $(MAIN_DIR)"
	@echo "  make prod               - üöÄ builds optimised binary executable: $(BINARY_PATH) from: $(MAIN_DIR)"
	@echo "  make prod-linux-amd64   - üöÄ builds optimised binary executable: $(BINARY_PATH)-linux-amd64 from: $(MAIN_DIR)"
	@echo "  make run-prod           - üî• runs optimised binary executable: $(BINARY_PATH) in production mode"
	@echo "  make run                - üî• runs binary executable: $(BINARY_PATH)\n"
	@echo "Use \"make help\" for more information about available commands."

# Pre-commit installation target
$(DEV_BIN)/pre-commit:
	@echo "==> ‚¨áÔ∏è Installing pre-commit@$(PRE_COMMIT_VERSION)"
	@mkdir -p $(DEV_BIN)
ifeq ($(BREW_CMD),brew)
	@$(BREW_CMD) install pre-commit
	@ln -sf $$(which pre-commit) $(DEV_BIN)/pre-commit
else ifeq ($(CHOCO_CMD),choco)
	@powershell -Command "choco install pre-commit --version $(PRE_COMMIT_VERSION) -y --no-progress"
	@ln -sf $$("C:/ProgramData/chocolatey/bin/pre-commit.exe") $(DEV_BIN)/pre-commit
else
# Fallback: pip-less install via pre-commit-standalone (if available)
	@curl -sSL https://github.com/pre-commit/pre-commit/releases/download/v$(PRE_COMMIT_VERSION)/pre-commit-$(PRE_COMMIT_VERSION)-py2.py3-none-any.whl \
		-o $(DEV_BIN)/pre-commit.zip && unzip -q -o $(DEV_BIN)/pre-commit.zip -d $(DEV_BIN)
endif
	@touch $(DEV_BIN)/pre-commit

# Golangci-lint installation target
$(DEV_BIN)/golangci-lint:
	@echo "==> ‚¨áÔ∏è Installing golangci-lint@$(GOLANGCI_LINT_VERSION)"
	@mkdir -p $(DEV_BIN)
ifeq ($(BREW_CMD),brew)
	@$(BREW_CMD) install golangci-lint
	@ln -sf $$(which golangci-lint) $(DEV_BIN)/golangci-lint
else ifeq ($(CHOCO_CMD),choco)
	@powershell -Command "choco install golangci-lint --version $(GOLANGCI_LINT_VERSION) -y --no-progress"
	@ln -sf $$("C:/ProgramData/chocolatey/bin/golangci-lint.exe") $(DEV_BIN)/golangci-lint
else
	@curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(DEV_BIN) v$(GOLANGCI_LINT_VERSION)
endif
	@touch $(DEV_BIN)/golangci-lint

# Upx installation target
$(DEV_BIN)/upx:
	@echo "==> ‚¨áÔ∏è Installing upx"
	@mkdir -p $(DEV_BIN)
ifeq ($(BREW_CMD),brew)
	@$(BREW_CMD) install upx
	@ln -sf $$(which upx) $(DEV_BIN)/upx
else ifeq ($(CHOCO_CMD),choco)
	@powershell -Command "choco install upx --version $(UPX_VERSION) -y --no-progress"
	@ln -sf $$("C:/ProgramData/chocolatey/bin/upx.exe") $(DEV_BIN)/upx
else
	@curl --location --output upx-$(UPX_VERSION)-amd64_linux.tar.xz "https://github.com/upx/upx/releases/download/v$(UPX_VERSION)/upx-$(UPX_VERSION)-amd64_linux.tar.xz" && \
    tar -xJf upx-$(UPX_VERSION)-amd64_linux.tar.xz && \
    cp upx-$(UPX_VERSION)-amd64_linux/upx /bin/ \
	&& rm -rf upx-$(UPX_VERSION)-amd64_linux
	@ln -sf /bin/upx $(DEV_BIN)/upx
endif
	@touch $(DEV_BIN)/upx

# Goose installation target
$(DEV_BIN)/goose:
	@echo "==> ‚¨áÔ∏è Installing goose"
	@mkdir -p $(DEV_BIN)
ifeq ($(BREW_CMD),brew)
	@$(BREW_CMD) install goose
	@ln -sf $$(which goose) $(DEV_BIN)/goose
else ifeq ($(CHOCO_CMD),choco)
	@go install github.com/pressly/goose/v3/cmd/goose@latest
	@go env -w GOPATH=$(GOPATH) \
		&& go env -w PATH=$$($$GOPATH/bin):$$(PATH) \
		&& ln -sf $$($$GOPATH/bin/goose.exe) $(DEV_BIN)/goose
else
	curl -fsSL \
		https://raw.githubusercontent.com/pressly/goose/master/install.sh |\
		GOOSE_INSTALL=$(HOME)/.goose sh -s v$(GOOSE_VERSION)
endif
	@touch $(DEV_BIN)/goose

# Sqlc installation target
$(DEV_BIN)/sqlc:
	@echo "==> ‚¨áÔ∏è Installing sqlc"
	@mkdir -p $(DEV_BIN)
ifeq ($(BREW_CMD),brew)
	@$(BREW_CMD) install sqlc
	@ln -sf $$(which sqlc) $(DEV_BIN)/sqlc
else ifeq ($(CHOCO_CMD),choco)
	@go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
	@go env -w GOPATH=$(GOPATH) \
		&& go env -w PATH=$$($$GOPATH/bin):$$(PATH) \
		&& ln -sf $$($$GOPATH/bin/sqlc.exe) $(DEV_BIN)/sqlc
else
	@curl --location --output sqlc_$(SQLC_VERSION)_linux_amd64.tar.gz "https://downloads.sqlc.dev/sqlc_$(SQLC_VERSION)_linux_amd64.tar.gz" && \
    tar -xJf sqlc_$(SQLC_VERSION)_linux_amd64.tar.gz && \
    cp sqlc /bin/ && \
	rm -rf sqlc_$(SQLC_VERSION)_linux_amd64.tar.gz sqlc
	@ln -sf /bin/sqlc $(DEV_BIN)/sqlc
endif
	@touch $(DEV_BIN)/sqlc

https://downloads.sqlc.dev/sqlc_1.29.0_linux_amd64.tar.gz

# Development tools installation
.PHONY: dev-tools-install pre-commit-install clean-dev-tools check
dev-tools-install: $(DEV_TOOLS_PATHS)

pre-commit-install: $(DEV_BIN)/pre-commit
	@pre-commit install

clean-dev-tools:
	@rm $(DEV_TOOLS_PATHS)

check: dev-tools-install pre-commit-install lint
	@echo "‚úÖ All development tools are installed!"

# Goose database migration tool
.PHONY: db-dev-sync db-prod-sync db-dev-down db-prod-down db-dev-reset db-prod-reset db-dev-status db-prod-status
db-dev-sync: $(DEV_BIN)/goose
	@goose $(GOOSE_DEV_FLAGS) up

db-prod-sync: $(DEV_BIN)/goose
	@goose $(GOOSE_FLAGS) up

db-dev-down: $(DEV_BIN)/goose
	@goose $(GOOSE_DEV_FLAGS) down

db-prod-down: $(DEV_BIN)/goose
	@goose $(GOOSE_FLAGS) down

db-dev-reset: $(DEV_BIN)/goose
	@goose $(GOOSE_DEV_FLAGS) reset

db-prod-reset: $(DEV_BIN)/goose
	@goose $(GOOSE_FLAGS) reset

db-dev-status: $(DEV_BIN)/goose
	@goose $(GOOSE_DEV_FLAGS) status

db-prod-status: $(DEV_BIN)/goose
	@goose $(GOOSE_FLAGS) status

# Sqlc queries linters
.PHONY: sqlc-check-offline sqlc-check-dev sqlc-check-prod
sqlc-check-offline: $(DEV_BIN)/sqlc
	@sqlc compile $(SQLC_OFFLINE_FLAGS) && \
		sqlc vet $(SQLC_OFFLINE_FLAGS)

sqlc-check-dev: $(DEV_BIN)/sqlc db-dev-sync
	@$(LOAD_DEV_ENV) && \
		sqlc compile $(SQLC_FLAGS) && \
		sqlc vet $(SQLC_FLAGS)

sqlc-check-prod: $(DEV_BIN)/sqlc db-prod-sync
	@$(LOAD_PROD_ENV) && \
		sqlc compile $(SQLC_FLAGS) && \
		sqlc vet $(SQLC_FLAGS)

# Go code formatters and linters
.PHONY: lint fmt tidy
lint: $(DEV_BIN)/golangci-lint
	@golangci-lint run

fmt: $(DEV_BIN)/golangci-lint
	@golangci-lint fmt

tidy:
	@go mod tidy -v -x

# Quality checks
.PHONY: audit unit-tests
audit: fmt lint tidy
	@go vet ./...
	@go mod verify

unit-tests:
	@mkdir -p $(COVERAGE_DIR) && \
		go test -race -coverprofile=$(COVERAGE_DIR)/cover.out \
			$(filter-out $(COVERAGE_EXCLUDE),$(shell go list ./...))
	@go tool cover -html=$(COVERAGE_DIR)/cover.out -o $(COVERAGE_DIR)/cover.html

# Sqlc generators
.PHONY: sqlc-gen-clean sqlc-gen-offline sqlc-gen-dev sqlc-gen-prod
sqlc-gen-clean:
	@rm -f $(SQLC_GEN_DIR)/*

sqlc-gen-offline: sqlc-check-offline sqlc-gen-clean
	@sqlc generate $(SQLC_OFFLINE_FLAGS)

sqlc-gen-dev: sqlc-check-dev sqlc-gen-clean
	@$(LOAD_DEV_ENV) && sqlc generate $(SQLC_FLAGS)

sqlc-gen-prod: sqlc-check-prod sqlc-gen-clean
	@$(LOAD_PROD_ENV) && sqlc generate $(SQLC_FLAGS)

# Go binary builders
.PHONY: clean build prod prod-linux-amd64 run run-prod
clean:
	@rm -f $(BINARY_PATH) $(BINARY_PATH)-linux-amd64

build: clean sqlc-gen-offline tidy
	@go build $(GOFLAGS) -o $(BINARY_PATH) $(MAIN_DIR)

prod: clean sqlc-gen-offline tidy
	@CGO_ENABLED=$(CGO_ENABLED) \
		go build $(GOFLAGS) -o $(BINARY_PATH) $(MAIN_DIR) && \
	upx -9 $(BINARY_PATH)

prod-linux-amd64: clean sqlc-gen-offline tidy
	@GOOS=linux GOARCH=amd64 CGO_ENABLED=$(CGO_ENABLED) \
		go build $(GOFLAGS) -o $(BINARY_PATH)-linux-amd64 $(MAIN_DIR) && \
	upx -9 $(BINARY_PATH)-linux-amd64

run: build
	@$(BINARY_PATH)

run-prod: prod
	@APP_MODE=prod $(BINARY_PATH)

# Docker compose commands
.PHONY: all-up all-up-build all-down db-up
all-up:
	@docker compose --file=build/docker-compose.yaml up --detach

all-build-up:
	@docker compose --file=build/docker-compose.yaml up --detach --build

all-down:
	@docker compose --file=build/docker-compose.yaml down

db-up:
	@docker compose --file=build/docker-compose.yaml up --detach database
